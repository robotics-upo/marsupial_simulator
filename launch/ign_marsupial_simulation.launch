<launch>

    <env name="IGN_GAZEBO_RESOURCE_PATH" value="$(find marsupial_simulator)/models:$(find marsupial_simulator)/models/sensors:$(find marsupial_simulator)/worlds/:$(find marsupial_simulator)/models/ctu_cras_norlab_x500_sensor_config_2/meshes/"/>

    # --------------------------------------------------------------------- PARAMETER --------------------------------------------------------------------- 
    ## Parameter
    <arg name="world_name" default="thermal_central"/>
    <arg name="model" default="marsupial/marsupial.sdf"/>
    <arg name="uav_name" default="x500" />
    <arg name="ugv_name" default="arco" />
    #UGV Parameter Define real/simulation and controller type
    <arg name="simulation" value="true" />                                  <!-- Define if it will run on a robot or simulation -->
    # scenario_1    18.0, 4.0 , 0.3 , 3.1415
    # scenario_5    14, 16 , 0.4, 0.0 , 0.0 , 3.1415
    # thermal_central    52.53 , 27.37 , 3.53 , 0 
    <!-- <arg name="dll_init_pos_x" default="52.5" />
    <arg name="dll_init_pos_y" default="16" />
    <arg name="dll_init_pos_z" default="2.4" />  -->
    <arg name="dll_init_pos_x" default="54.85" />
    <arg name="dll_init_pos_y" default="10.92" />
    <arg name="dll_init_pos_z" default="2.375" /> 
    <arg name="dll_init_pos_z_uav" default="$(eval 0.35 + arg('dll_init_pos_z'))" />
    <arg name="dll_init_pos_th" default="3.1415" />
    <arg name="able_aloam_uav" default="false"/>
    <arg name="able_dll_uav" default="true"/>
    <param name="use_sim_time" value="true"/>

    # --------------------------------------------------------------------- NODES --------------------------------------------------------------------- 
    
    # ---------------------------------------------------Start Gazebo environment ---------------------------------------------------
    # Node regarding with World
    <include file="$(find ros_ign_gazebo)/launch/ign_gazebo.launch">
        <arg name="ign_args" value="-r -v 4 $(find marsupial_simulator)/worlds/$(arg world_name).world"/>
        <env name="IGN_GAZEBO_RESOURCE_PATH" value="$(optenv IGN_GAZEBO_RESOURCE_PATH):$(find marsupial_simulator)/models:$(find marsupial_simulator)/models/sensors:$(find marsupial_simulator)/worlds/"/>
    </include>

     # Spawn the node. IMPORTANT: the world name must be the same as the filename of the world file
    <!-- <arg name="x_pos" default="3 " />
    <arg name="y_pos" default="-12" />
    <arg name="z_pos" default="1.8 " /> -->
    <arg name="x_pos" default="5.35" />
    <arg name="y_pos" default="-17.08" />
    <arg name="z_pos" default="1.32" />
    <arg name="y_rot" default="3.1415" />
    <node
        pkg="ros_ign_gazebo"
        type="create"
        name="marsupial_spawn"
        output="screen"
        args="-world $(arg world_name) -file $(find marsupial_simulator)/models/$(arg model) -name marsupial -allow_renaming true -x $(arg x_pos) -y $(arg y_pos) -z $(arg z_pos) -Y $(arg y_rot) --timeout 20000 ">
    </node>

    # node provides a network bridge which enables the exchange of messages between ROS and Gazebo Transport
        ## args: declare inf. about mesage to exchange (format: name_topic@type_ros_msgs@type_ign_gazebo_msgs )
    <node
        pkg="ros_ign_bridge"
        type="parameter_bridge"
        name="$(anon ros_ign_bridge)"
        output="screen"
        args="
            /world/$(arg world_name)/pose/info@tf2_msgs/TFMessage@ignition.msgs.Pose_V
            /clock@rosgraph_msgs/Clock@ignition.msgs.Clock  

            /arco/os1_cloud_node/points@sensor_msgs/PointCloud2@ignition.msgs.PointCloudPacked 
            /arco/imu@sensor_msgs/Imu@ignition.msgs.IMU
            /arco/idmind_motors/set_velocities@geometry_msgs/Twist@ignition.msgs.Twist 
            /arco/odometry@nav_msgs/Odometry@ignition.msgs.Odometry


            /x500/os1_cloud_node/points@sensor_msgs/PointCloud2@ignition.msgs.PointCloudPacked
            /x500/imu@sensor_msgs/Imu@ignition.msgs.IMU
            /x500/navsat@sensor_msgs/NavSatFix@ignition.msgs.NavSat
            /model/x500/odometry@nav_msgs/Odometry@ignition.msgs.Odometry
            /x500/gazebo/command/motor_speed@mav_msgs/Actuators@ignition.msgs.Actuators
            ">
            <!-- /x500/gazebo/command/twist@geometry_msgs/Twist@ignition.msgs.Twist -->

            <!-- 
            /model/arco/tf@tf2_msgs/TFMessage@ignition.msgs.Pose_V
            /gt@tf2_msgs/TFMessage@ignition.msgs.Pose_V
            /world/default/model/arco/joint_state@sensor_msgs/JointState@ignition.msgs.Model
            /model/arco/front_right/tf@tf2_msgs/TFMessage@ignition.msgs.Pose_V -->
        <!-- <remap from="/model/arco/tf" to ="/tf"/> -->   #Publish odom frame
        <!-- <remap from="/gt" to ="/tf"/> -->
        <!-- <remap from="/world/default/model/arco/joint_state" to="/joint_states" /> -->
        <remap from="/x500/navsat" to="/x500/gps" />
        <remap from="/x500/gazebo/command/motor_speed" to="/command/motor_speed" />
        <remap from="/model/x500/odometry" to="/x500/odom" />
        <remap from="/arco/odometry" to="/arco/odom" />
    </node>

    # --------------------------------------------------- UGV Simulation ---------------------------------------------------

    <node pkg="marsupial_simulator" type="ign_clock_publisher" name="ign_clock_publisher"/>

    <include file="$(find marsupial_simulator)/launch/marsupial_ugv_frames_simulation.launch">
        <arg name="ugv_name" value="$(arg ugv_name)"/>
        <arg name="able_frames_ugv" value="true"/>
    </include>

    # Start Diagnostics Aggreagator
    <!-- <include file="$(find idmind_diagnostics)/launch/idmind_diagnostics.launch" /> -->

    # Otherwise initiate sensors
    <group unless="$(arg simulation)">
        <include file="$(find idmind_imu)/launch/idmind_imu.launch">
            <arg name="imu" value="razor" />
            <arg name="tf_prefix" value="$(arg robot_name)/" />
        </include>
    </group>
        
    # Start sensors and actuators nodes
    <include file="$(find idmind_sensorsboard)/launch/idmind_sensorsboard.launch">
        <arg name="simulation" value="$(arg simulation)" />
    </include>

    # Start interface node
    <include file="$(find idmind_interface)/launch/idmind_interface.launch"/>
    
    # Start idmind_teleop
    <include file="$(find idmind_teleop)/launch/idmind_teleop.launch">
        <arg name="cmd_vel_topic" default="$(arg ugv_name)/idmind_motors/set_velocities" />
    </include>

    <node pkg="timed_roslaunch" type="timed_roslaunch.sh" name="timed_ugv_dll" output="screen"
            args="0 marsupial_simulator dll_simulation.launch robot_name:=$(arg ugv_name)
            initial_x:=$(arg dll_init_pos_x) 
            initial_y:=$(arg dll_init_pos_y) 
            initial_z:=$(arg dll_init_pos_z) 
            initial_a:=$(arg dll_init_pos_th) ">
    </node>

    # --------------------------------------------------- UAV Simulation ---------------------------------------------------

    <include file="$(find marsupial_simulator)/launch/marsupial_uav_frames_simulation.launch">
        <arg name="uav_name" value="$(arg uav_name)"/>
        <arg name="able_frames_uav" value="true"/>
    </include>

    <node pkg="timed_roslaunch" type="timed_roslaunch.sh" name="timed_uav_dll" output="screen"
            args="0 marsupial_simulator dll_simulation.launch robot_name:=$(arg uav_name) 
            initial_x:=$(arg dll_init_pos_x) 
            initial_y:=$(arg dll_init_pos_y) 
            initial_z:=$(arg dll_init_pos_z_uav) 
            initial_a:=$(arg dll_init_pos_th) ">
    </node>

    ## UAV Control Stuff
    <node name="roll_pitch_yawrate_thrust_controller_node" pkg="quadrotor_ign_controller" type="roll_pitch_yawrate_thrust_controller_node" output="screen">
        <rosparam command="load" file="$(find quadrotor_ign_controller)/resources/roll_pitch_yawrate_thrust_controller_dji.yaml" />
        <rosparam command="load" file="$(find quadrotor_ign_controller)/resources/dji.yaml"/>
        <remap from="/odometry" to="/$(arg uav_name)/odom"/> # /laser_odom_to_init" loam
    </node>

    <node name="velocity_PID_controller" pkg="quadrotor_ign_controller" type="velocity_PID_controller" output="screen">
        <remap from="odom" to="/$(arg uav_name)/odom"/> 
    </node>

     ## UAV Joy Stuff
    <node pkg="joy" type="joy_node" name="joy_node_$(arg uav_name)" respawn="true" >
        <param name="dev" type="string" value="/dev/input/js1" /> 
        <param name="deadzone" value="0.12" />
        <remap from="/joy" to="/joy_$(arg uav_name)"/> 
    </node>

    <node pkg="quadrotor_joy_interface" type="joy_vel" name="joy_interface_$(arg uav_name)" respawn="true" >
        <param name="max_vel_x" value="1.0" /> 
        <param name="max_vel_y" value="1.0" /> 
        <param name="max_yaw_rate" value="1.0" /> 
        <param name="axis_vel_y_" value="3" /> #axes x for node joy
        <param name="axis_vel_x_" value="4" /> #axes y for node joy
        <remap from="/joy" to="/joy_$(arg uav_name)"/> 
    </node>

</launch>