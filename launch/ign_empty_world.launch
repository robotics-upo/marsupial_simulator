<launch>

    <env name="IGN_GAZEBO_RESOURCE_PATH" value="$(find marsupial_simulator)/models:$(find marsupial_simulator)/models/sensors:$(find marsupial_simulator)/worlds/"/>

    # --------------------------------------------------------------------- PARAMETER --------------------------------------------------------------------- 
    ## Parameter
    <arg name="world_name" default="edifice"/>
    <arg name="model" default="marsupial/marsupial.sdf"/>
    <arg name="uav_name" default="firefly" />
    <arg name="ugv_name" default="arco" />
    #UGV Parameter Define real/simulation and controller type
    <arg name="simulation" value="true" />                                  <!-- Define if it will run on a robot or simulation -->
    # scenario_1    18.0, 4.0 , 0.3 , 3.1415
    # scenario_5    14, 16 , 0.4, 0.0 , 0.0 , 3.1415
    # thermal_central    52.53 , 27.37 , 3.53 , 0 
    <arg name="dll_init_pos_x" default="18" />
    <arg name="dll_init_pos_y" default="4" />
    <arg name="dll_init_pos_z" default="0.4" />
    <arg name="dll_init_pos_th" default="3.1415" />
    <arg name="able_aloam_uav" default="false"/>
    <arg name="able_dll_uav" default="true"/>


    # --------------------------------------------------------------------- NODES --------------------------------------------------------------------- 
    
    # ---------------------------------------------------Start Gazebo environment ---------------------------------------------------
    # Node regarding with World
    <include file="$(find ros_ign_gazebo)/launch/ign_gazebo.launch">
        <arg name="ign_args" value="-r -v 4 $(find marsupial_simulator)/worlds/$(arg world_name).world"/>
        <env name="IGN_GAZEBO_RESOURCE_PATH" value="$(optenv IGN_GAZEBO_RESOURCE_PATH):$(find marsupial_simulator)/models:$(find marsupial_simulator)/models/sensors:$(find marsupial_simulator)/worlds/"/>
    </include>

     # Spawn the node. IMPORTANT: the world name must be the same as the filename of the world file
    <arg name="x_pos" default="0 " />
    <arg name="y_pos" default="0" />
    <arg name="z_pos" default="0.4 " />
    <node
        pkg="ros_ign_gazebo"
        type="create"
        name="marsupial_spawn"
        output="screen"
        args="-world $(arg world_name) -file $(find marsupial_simulator)/models/$(arg model) -name marsupial -allow_renaming true -x $(arg x_pos) -y $(arg y_pos) -z $(arg z_pos) --timeout 20000">
    </node>

    # node provides a network bridge which enables the exchange of messages between ROS and Gazebo Transport
        ## args: declare inf. about mesage to exchange (format: name_topic@type_ros_msgs@type_ign_gazebo_msgs )
    <node
        pkg="ros_ign_bridge"
        type="parameter_bridge"
        name="$(anon ros_ign_bridge)"
        output="screen"
        args="/os1_cloud_node/points@sensor_msgs/PointCloud2@ignition.msgs.PointCloudPacked 
            /idmind_motors/set_velocities@geometry_msgs/Twist@ignition.msgs.Twist 
            /gt@tf2_msgs/TFMessage@ignition.msgs.Pose_V
            /model/arco/tf@tf2_msgs/TFMessage@ignition.msgs.Pose_V
            /world/$(arg world_name)/pose/info@tf2_msgs/TFMessage@ignition.msgs.Pose_V
            /clock@rosgraph_msgs/Clock@ignition.msgs.Clock  
            /world/default/model/arco/joint_state@sensor_msgs/JointState@ignition.msgs.Model
            /model/arco/front_right/tf@tf2_msgs/TFMessage@ignition.msgs.Pose_V
            ">
        <remap from="/model/arco/tf" to ="/tf"/>
        <remap from="/gt" to ="/tf"/>
        <remap from="/world/default/model/arco/joint_state" to="/joint_states" />
    </node>

    # --------------------------------------------------- UGV Simulation ---------------------------------------------------

    <node pkg="marsupial_simulator" type="ign_clock_publisher" name="ign_clock_publisher"/>

    <include file="$(find marsupial_simulator)/launch/marsupial_ugv_frames_simulation.launch">
        <arg name="ugv_name" value="$(arg ugv_name)"/>
        <arg name="able_frames_ugv" value="true"/>
    </include>

    # Start Diagnostics Aggreagator
    <include file="$(find idmind_diagnostics)/launch/idmind_diagnostics.launch" />

    # Otherwise initiate sensors
    <!-- <group unless="$(arg simulation)">
        <include file="$(find idmind_imu)/launch/idmind_imu.launch">
            <arg name="imu" value="razor" />
            <arg name="tf_prefix" value="$(arg robot_name)/" />
        </include>
    </group> -->
        
    # Start sensors and actuators nodes
    <include file="$(find idmind_sensorsboard)/launch/idmind_sensorsboard.launch">
        <arg name="simulation" value="$(arg simulation)" />
    </include>

    # Start interface node
    <include file="$(find idmind_interface)/launch/idmind_interface.launch">
    </include>
    
    # Start idmind_teleop
    <include file="$(find idmind_teleop)/launch/idmind_teleop.launch">
        <arg name="cmd_vel_topic" default="idmind_motors/set_velocities" />
    </include>

    <!-- <node pkg="timed_roslaunch" type="timed_roslaunch.sh" name="timed_ugv_dll" output="screen"
            args="0 marsupial_launchers dll_simulation.launch robot_name:=$(arg ugv_name) map:=$(arg world_name) 
            initial_x:=$(arg dll_init_pos_x) initial_y:=$(arg dll_init_pos_y) initial_z:=$(arg dll_init_pos_z) initial_a:=$(arg dll_init_pos_th) ">
    </node> -->

    # --------------------------------------------------- UAV Simulation ---------------------------------------------------



    <!-- <include file="$(find marsupial_simulator)/launch/marsupial_uav_frames_simulation.launch">
        <arg name="uav_name" value="$(arg uav_name)"/>
        <arg name="able_frames_uav" value="false"/>
    </include> -->

    <!-- <node pkg="marsupial_simulator" type="ground_truth_pose_publisher" name="gt" args="$(arg world_name) arco world"/> -->

  <!-- <node
    type="rqt_topic"
    name="rqt_topic"
    pkg="rqt_topic"
    args="-t" /> -->

</launch>